This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix. The content has been processed where comments have been removed, empty lines have been removed, line numbers have been added.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src/**/*, *.*
- Files matching these patterns are excluded: **/*.log, node_modules/**/*
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Empty lines have been removed from all files
- Line numbers have been added to the beginning of each line

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  components/
    Model/
      Effects.js
      GenericModel.js
      SelectableItem.js
    Scene.js
  configs/
    ModelConfig.js
  context/
    ModelProvider.js
  hooks/
    useContentHeight.js
    useDebouncedHover.js
    useReactNativeMessaging.js
  App.js
  index.css
  index.js
  reportWebVitals.js
.gitignore
package.json
repomix.config.json
webpack.config.js

================================================================
Files
================================================================

================
File: src/components/Model/Effects.js
================
 1: import React from "react";
 2: import {
 3:   EffectComposer,
 4:   Outline,
 5:   ToneMapping,
 6: } from "@react-three/postprocessing";
 7: import * as THREE from "three";
 8: const Effects = ({
 9:   selectedItems,
10:   occupiedItems,
11:   selectionColor,
12:   occupiedColor,
13: }) => {
14:   const isSelected = (name) => selectedItems.includes(name);
15:   const isOccupied = (name) => occupiedItems.includes(name);
16:   return (
17:     <EffectComposer>
18:       <Outline
19:         selection={[...selectedItems, ...occupiedItems]}
20:         edgeStrength={10}
21:         visibleEdgeColor={(obj) => {
22:           const name = obj.name;
23:           if (isSelected(name)) {
24:             return selectionColor;
25:           } else if (isOccupied(name)) {
26:             return occupiedColor;
27:           }
28:           return new THREE.Color(0x000000);
29:         }}
30:         hiddenEdgeColor={(obj) => {
31:           const name = obj.name;
32:           if (isSelected(name)) {
33:             return selectionColor;
34:           } else if (isOccupied(name)) {
35:             return occupiedColor;
36:           }
37:           return new THREE.Color(0x000000);
38:         }}
39:       />
40:       <ToneMapping />
41:     </EffectComposer>
42:   );
43: };
44: export default Effects;

================
File: src/components/Model/GenericModel.js
================
 1: import React, { useRef, useCallback } from "react";
 2: import { useGLTF } from "@react-three/drei";
 3: import { Clock } from "three";
 4: import SelectableItem from "./SelectableItem";
 5: import Effects from "./Effects";
 6: import useDebouncedHover from "../../hooks/useDebouncedHover";
 7: export function GenericModel({
 8:   modelConfig,
 9:   selectedItems,
10:   occupiedItems,
11:   onItemClicked,
12:   ...props
13: }) {
14:   const { nodes, materials } = useGLTF(modelConfig.modelPath);
15:   const groupRef = useRef();
16:   const clock = useRef(new Clock());
17:   const { hovered, handlePointerOver, handlePointerOut } =
18:     useDebouncedHover(30);
19:   const handleClick = useCallback(
20:     (itemId) => (e) => {
21:       e.stopPropagation();
22:       if (onItemClicked) {
23:         onItemClicked(itemId);
24:       }
25:       if (window.ReactNativeWebView && window.ReactNativeWebView.postMessage) {
26:         window.ReactNativeWebView.postMessage(
27:           JSON.stringify({ type: "itemClicked", id: itemId })
28:         );
29:       }
30:     },
31:     [onItemClicked]
32:   );
33:   return (
34:     <group ref={groupRef} {...props}>
35:       {}
36:       <Effects
37:         selectedItems={selectedItems}
38:         occupiedItems={occupiedItems}
39:         selectionColor={modelConfig.selectionColor}
40:         occupiedColor={modelConfig.occupiedColor}
41:       />
42:       {}
43:       {modelConfig.staticItems.map((item) => (
44:         <mesh
45:           key={item.name}
46:           geometry={nodes[item.geometryName].geometry}
47:           material={materials[item.materialName]}
48:         />
49:       ))}
50:       {}
51:       {modelConfig.selectableItems.map((item) => {
52:         const selected = selectedItems.includes(item.id);
53:         const occupied = occupiedItems.includes(item.id);
54:         return (
55:           <SelectableItem
56:             key={item.id}
57:             itemConfig={item}
58:             geometryOuter={nodes[item.outerGeometryName].geometry}
59:             geometryInner={
60:               item.innerGeometryName
61:                 ? nodes[item.innerGeometryName].geometry
62:                 : null
63:             }
64:             materialOuter={materials[item.outerMaterialName]}
65:             materialInner={
66:               item.innerMaterialName ? materials[item.innerMaterialName] : null
67:             }
68:             modelConfig={modelConfig}
69:             selected={selected}
70:             occupied={occupied}
71:             onPointerOver={() => handlePointerOver(item.id, occupiedItems)}
72:             onPointerOut={handlePointerOut}
73:             onClick={handleClick(item.id)}
74:             clock={clock.current}
75:           />
76:         );
77:       })}
78:     </group>
79:   );
80: }
81: export const preloadModel = (modelConfig) => {
82:   useGLTF.preload(modelConfig.modelPath);
83: };

================
File: src/components/Model/SelectableItem.js
================
 1: import React, { useRef, useEffect } from "react";
 2: import { useFrame } from "@react-three/fiber";
 3: const SelectableItem = ({
 4:   itemConfig,
 5:   geometryOuter,
 6:   geometryInner,
 7:   materialOuter,
 8:   materialInner,
 9:   modelConfig,
10:   selected,
11:   occupied,
12:   onPointerOver,
13:   onPointerOut,
14:   onClick,
15:   clock,
16: }) => {
17:   const meshRef = useRef();
18:   const innerMeshRef = useRef();
19:   const { id, type } = itemConfig;
20:   const emissiveMaterialOuterSelected = modelConfig.createEmissiveMaterial(
21:     materialOuter,
22:     modelConfig.selectionColor
23:   );
24:   const emissiveMaterialOuterOccupied = modelConfig.createEmissiveMaterial(
25:     materialOuter,
26:     modelConfig.occupiedColor
27:   );
28:   const emissiveMaterialInnerSelected = modelConfig.createEmissiveMaterial(
29:     materialInner,
30:     modelConfig.selectionColor
31:   );
32:   const emissiveMaterialInnerOccupied = modelConfig.createEmissiveMaterial(
33:     materialInner,
34:     modelConfig.occupiedColor
35:   );
36:   useEffect(() => {
37:     if (selected) {
38:       meshRef.current.material = emissiveMaterialOuterSelected;
39:       if (innerMeshRef.current) {
40:         innerMeshRef.current.material = emissiveMaterialInnerSelected;
41:       }
42:     } else if (occupied) {
43:       meshRef.current.material = emissiveMaterialOuterOccupied;
44:       if (innerMeshRef.current) {
45:         innerMeshRef.current.material = emissiveMaterialInnerOccupied;
46:       }
47:     } else {
48:       meshRef.current.material = materialOuter;
49:       if (innerMeshRef.current) {
50:         innerMeshRef.current.material = materialInner;
51:       }
52:     }
53:   }, [
54:     selected,
55:     occupied,
56:     emissiveMaterialOuterSelected,
57:     emissiveMaterialOuterOccupied,
58:     emissiveMaterialInnerSelected,
59:     emissiveMaterialInnerOccupied,
60:     materialOuter,
61:     materialInner,
62:   ]);
63:   useFrame(() => {
64:     if (selected && meshRef.current) {
65:       const elapsed = clock.getElapsedTime();
66:       const scale =
67:         1 +
68:         modelConfig.animationScale *
69:           Math.sin(elapsed * modelConfig.animationSpeed);
70:       meshRef.current.scale.set(scale, scale, scale);
71:     }
72:   });
73:   return (
74:     <mesh
75:       ref={meshRef}
76:       geometry={geometryOuter}
77:       onPointerOver={onPointerOver}
78:       onPointerOut={onPointerOut}
79:       onClick={onClick}
80:       name={id}
81:     >
82:       {geometryInner && (
83:         <mesh ref={innerMeshRef} geometry={geometryInner} name={id} />
84:       )}
85:     </mesh>
86:   );
87: };
88: export default SelectableItem;

================
File: src/components/Scene.js
================
 1: import React from "react";
 2: import { Canvas } from "@react-three/fiber";
 3: import { Sky, Bvh, OrbitControls } from "@react-three/drei";
 4: import { Selection } from "@react-three/postprocessing";
 5: import { GenericModel } from "./Model/GenericModel";
 6: export function Scene({
 7:   modelConfig,
 8:   selectedItems,
 9:   occupiedItems,
10:   onItemClicked,
11:   sceneStyle,
12: }) {
13:   const defaultStyle = {
14:     width: "375px",
15:     height: "667px",
16:     margin: "0 auto",
17:     borderRadius: "15px",
18:     boxShadow: "0 15px 30px rgba(0, 0, 0, 0.2), 0 5px 15px rgba(0, 0, 0, 0.15)",
19:     background: "linear-gradient(135deg, #f5f5f5, #eaeaea)",
20:     border: "1px solid rgba(0, 0, 0, 0.1)",
21:   };
22:   const canvasStyle = { ...defaultStyle, ...sceneStyle };
23:   return (
24:     <Canvas
25:       style={canvasStyle}
26:       flat
27:       dpr={[1, 1.5]}
28:       gl={{ antialias: false }}
29:       camera={{
30:         position: modelConfig.initialCameraPosition,
31:         fov: modelConfig.cameraFov,
32:       }}
33:     >
34:       <ambientLight intensity={1.5 * Math.PI} />
35:       <Sky />
36:       <Bvh firstHitOnly>
37:         <Selection>
38:           <GenericModel
39:             rotation={[0, 0, 0]}
40:             position={[-0.8, 0, 0]}
41:             modelConfig={modelConfig}
42:             selectedItems={selectedItems}
43:             occupiedItems={occupiedItems}
44:             onItemClicked={onItemClicked}
45:           />
46:         </Selection>
47:       </Bvh>
48:       <OrbitControls
49:         enableZoom={true}
50:         enablePan={true}
51:         enableRotate={true}
52:         panSpeed={1}
53:         zoomSpeed={1.5}
54:         rotateSpeed={1.2}
55:         screenSpacePanning={true}
56:         touchPan={1}
57:         touchRotate={2}
58:         touchZoom={2}
59:       />
60:     </Canvas>
61:   );
62: }
63: export default Scene;

================
File: src/configs/ModelConfig.js
================
  1: import * as THREE from "three";
  2: export class RestaurantModelConfig {
  3:   constructor({
  4:     modelPath,
  5:     initialCameraPosition = [0, 10, 0],
  6:     cameraFov = 40,
  7:     selectableItems = [],
  8:     staticItems = [],
  9:     selectionColor = new THREE.Color(0x00ff00),
 10:     occupiedColor = new THREE.Color(0xff0000),
 11:     emissiveIntensity = 0.5,
 12:     animationSpeed = 2,
 13:     animationScale = 0.05,
 14:   }) {
 15:     this.modelPath = modelPath;
 16:     this.initialCameraPosition = initialCameraPosition;
 17:     this.cameraFov = cameraFov;
 18:     this.selectableItems = selectableItems;
 19:     this.staticItems = staticItems;
 20:     this.selectionColor = selectionColor;
 21:     this.occupiedColor = occupiedColor;
 22:     this.emissiveIntensity = emissiveIntensity;
 23:     this.animationSpeed = animationSpeed;
 24:     this.animationScale = animationScale;
 25:   }
 26:   createEmissiveMaterial(baseMaterial, emissiveColor) {
 27:     return new THREE.MeshStandardMaterial({
 28:       ...baseMaterial,
 29:       emissive: emissiveColor,
 30:       emissiveIntensity: this.emissiveIntensity,
 31:     });
 32:   }
 33: }
 34: export const kitchenModelConfig = new RestaurantModelConfig({
 35:   modelPath: "/kitchen.glb",
 36:   selectableItems: [
 37:     {
 38:       type: "chair",
 39:       id: "CHAIR1",
 40:       outerGeometryName: "chairs001_1",
 41:       innerGeometryName: "chairs001_2",
 42:       outerMaterialName: "walls",
 43:       innerMaterialName: "plastic",
 44:     },
 45:     {
 46:       type: "chair",
 47:       id: "CHAIR2",
 48:       outerGeometryName: "chairs002_1",
 49:       innerGeometryName: "chairs002_2",
 50:       outerMaterialName: "walls",
 51:       innerMaterialName: "plastic",
 52:     },
 53:     {
 54:       type: "chair",
 55:       id: "CHAIR3",
 56:       outerGeometryName: "chairs003_1",
 57:       innerGeometryName: "chairs003_2",
 58:       outerMaterialName: "walls",
 59:       innerMaterialName: "plastic",
 60:     },
 61:     {
 62:       type: "chair",
 63:       id: "CHAIR4",
 64:       outerGeometryName: "chairs004_1",
 65:       innerGeometryName: "chairs004_2",
 66:       outerMaterialName: "walls",
 67:       innerMaterialName: "plastic",
 68:     },
 69:     {
 70:       type: "chair",
 71:       id: "CHAIR5",
 72:       outerGeometryName: "chairs005_1",
 73:       innerGeometryName: "chairs005_2",
 74:       outerMaterialName: "walls",
 75:       innerMaterialName: "plastic",
 76:     },
 77:     {
 78:       type: "chair",
 79:       id: "CHAIR6",
 80:       outerGeometryName: "chairs006_1",
 81:       innerGeometryName: "chairs006_2",
 82:       outerMaterialName: "walls",
 83:       innerMaterialName: "plastic",
 84:     },
 85:   ],
 86:   staticItems: [
 87:     { name: "vase1", geometryName: "vase1", materialName: "gray" },
 88:     { name: "bottle", geometryName: "bottle", materialName: "gray" },
 89:     { name: "walls", geometryName: "walls_1", materialName: "floor" },
 90:     {
 91:       name: "plant_leaves",
 92:       geometryName: "plant_1",
 93:       materialName: "potted_plant_01_leaves",
 94:     },
 95:     {
 96:       name: "plant_pot",
 97:       geometryName: "plant_2",
 98:       materialName: "potted_plant_01_pot",
 99:     },
100:     {
101:       name: "cuttingboard",
102:       geometryName: "cuttingboard",
103:       materialName: "walls",
104:     },
105:     { name: "bowl", geometryName: "bowl", materialName: "walls" },
106:     { name: "carpet", geometryName: "carpet", materialName: "carpet" },
107:     { name: "table", geometryName: "table", materialName: "walls" },
108:     { name: "vase", geometryName: "vase", materialName: "gray" },
109:     { name: "kitchen", geometryName: "kitchen", materialName: "walls" },
110:     { name: "sink", geometryName: "sink", materialName: "chrome" },
111:   ],
112: });
113: export const modernRestaurantConfig = new RestaurantModelConfig({
114:   modelPath: "/modern-restaurant.glb",
115:   initialCameraPosition: [0, 8, 5],
116:   cameraFov: 45,
117:   selectableItems: [
118:     {
119:       type: "chair",
120:       id: "TABLE1_CHAIR1",
121:       outerGeometryName: "chair_1_outer",
122:       innerGeometryName: "chair_1_inner",
123:       outerMaterialName: "chair_material",
124:       innerMaterialName: "cushion_material",
125:     },
126:   ],
127:   staticItems: [
128:   ],
129:   selectionColor: new THREE.Color(0x2196f3),
130:   occupiedColor: new THREE.Color(0xff5252),
131: });
132: export const modelRegistry = {
133:   kitchen: kitchenModelConfig,
134:   modernRestaurant: modernRestaurantConfig,
135: };

================
File: src/context/ModelProvider.js
================
  1: import React, {
  2:   createContext,
  3:   useState,
  4:   useContext,
  5:   useEffect,
  6:   useCallback,
  7: } from "react";
  8: import { useGLTF } from "@react-three/drei";
  9: import { modelRegistry } from "../configs/ModelConfig";
 10: const ModelContext = createContext(null);
 11: export const ModelProvider = ({ children, initialModelKey = "kitchen" }) => {
 12:   const [currentModelKey, setCurrentModelKey] = useState(initialModelKey);
 13:   const [modelConfig, setModelConfig] = useState(
 14:     modelRegistry[initialModelKey]
 15:   );
 16:   const [selectedItems, setSelectedItems] = useState([]);
 17:   const [occupiedItems, setOccupiedItems] = useState(["CHAIR1", "CHAIR3"]);
 18:   const [isLoading, setIsLoading] = useState(true);
 19:   useGLTF.preload(modelConfig?.modelPath);
 20:   useEffect(() => {
 21:     const config = modelRegistry[currentModelKey];
 22:     if (config) {
 23:       setModelConfig(config);
 24:       setIsLoading(true);
 25:       useGLTF.preload(config.modelPath, () => {
 26:         setIsLoading(false);
 27:       });
 28:       setSelectedItems([]);
 29:     } else {
 30:       console.error(`Model configuration for "${currentModelKey}" not found`);
 31:     }
 32:   }, [currentModelKey]);
 33:   const changeModel = useCallback((modelKey) => {
 34:     if (modelRegistry[modelKey]) {
 35:       setCurrentModelKey(modelKey);
 36:     } else {
 37:       console.error(`Model "${modelKey}" not found in registry`);
 38:     }
 39:   }, []);
 40:   const toggleItemSelection = useCallback(
 41:     (itemId) => {
 42:       if (occupiedItems.includes(itemId)) {
 43:         return;
 44:       }
 45:       setSelectedItems((prev) => {
 46:         if (prev.includes(itemId)) {
 47:           return prev.filter((id) => id !== itemId);
 48:         } else {
 49:           return [...prev, itemId];
 50:         }
 51:       });
 52:     },
 53:     [occupiedItems]
 54:   );
 55:   const setItemsAsOccupied = useCallback((itemIds) => {
 56:     if (!Array.isArray(itemIds)) {
 57:       itemIds = [itemIds];
 58:     }
 59:     setSelectedItems((prev) => prev.filter((id) => !itemIds.includes(id)));
 60:     setOccupiedItems((prev) => {
 61:       const newOccupied = [...prev];
 62:       itemIds.forEach((id) => {
 63:         if (!newOccupied.includes(id)) {
 64:           newOccupied.push(id);
 65:         }
 66:       });
 67:       return newOccupied;
 68:     });
 69:   }, []);
 70:   const clearOccupancy = useCallback((itemIds) => {
 71:     if (!Array.isArray(itemIds)) {
 72:       itemIds = [itemIds];
 73:     }
 74:     setOccupiedItems((prev) => prev.filter((id) => !itemIds.includes(id)));
 75:   }, []);
 76:   const availableItems =
 77:     modelConfig?.selectableItems.map((item) => item.id) || [];
 78:   const contextValue = {
 79:     currentModelKey,
 80:     modelConfig,
 81:     isLoading,
 82:     selectedItems,
 83:     occupiedItems,
 84:     availableItems,
 85:     changeModel,
 86:     toggleItemSelection,
 87:     setSelectedItems,
 88:     setOccupiedItems,
 89:     setItemsAsOccupied,
 90:     clearOccupancy,
 91:   };
 92:   return (
 93:     <ModelContext.Provider value={contextValue}>
 94:       {children}
 95:     </ModelContext.Provider>
 96:   );
 97: };
 98: export const useModel = () => {
 99:   const context = useContext(ModelContext);
100:   if (!context) {
101:     throw new Error("useModel must be used within a ModelProvider");
102:   }
103:   return context;
104: };

================
File: src/hooks/useContentHeight.js
================
 1: import { useEffect } from "react";
 2: export const useContentHeight = () => {
 3:   useEffect(() => {
 4:     const postMessageToRN = (message) => {
 5:       if (window.ReactNativeWebView && window.ReactNativeWebView.postMessage) {
 6:         window.ReactNativeWebView.postMessage(JSON.stringify(message));
 7:       }
 8:     };
 9:     const sendHeight = () => {
10:       const height = document.body.scrollHeight;
11:       postMessageToRN({ type: "contentHeight", height });
12:     };
13:     sendHeight();
14:     window.addEventListener("resize", sendHeight);
15:     const observer = new MutationObserver(sendHeight);
16:     observer.observe(document.body, {
17:       childList: true,
18:       subtree: true,
19:       attributes: true,
20:     });
21:     return () => {
22:       window.removeEventListener("resize", sendHeight);
23:       observer.disconnect();
24:     };
25:   }, []);
26: };

================
File: src/hooks/useDebouncedHover.js
================
 1: import { useState, useCallback } from "react";
 2: import { debounce } from "lodash";
 3: const useDebouncedHover = (delay = 30) => {
 4:   const [hovered, setHovered] = useState(null);
 5:   const debouncedSetHovered = useCallback(
 6:     debounce((name) => {
 7:       setHovered(name);
 8:     }, delay),
 9:     [delay]
10:   );
11:   const handlePointerOver = useCallback(
12:     (name, occupiedChairs) => (e) => {
13:       e.stopPropagation();
14:       if (occupiedChairs.includes(name)) return;
15:       debouncedSetHovered(name);
16:     },
17:     [debouncedSetHovered]
18:   );
19:   const handlePointerOut = useCallback(() => {
20:     debouncedSetHovered(null);
21:   }, [debouncedSetHovered]);
22:   return {
23:     hovered,
24:     handlePointerOver,
25:     handlePointerOut,
26:   };
27: };
28: export default useDebouncedHover;

================
File: src/hooks/useReactNativeMessaging.js
================
 1: import { useEffect, useCallback } from "react";
 2: export const useReactNativeMessaging = (setSelectedItems, setOccupiedItems) => {
 3:   const postMessageToRN = useCallback((message) => {
 4:     if (window.ReactNativeWebView && window.ReactNativeWebView.postMessage) {
 5:       window.ReactNativeWebView.postMessage(JSON.stringify(message));
 6:     }
 7:   }, []);
 8:   const notifyInteractionStart = useCallback(() => {
 9:     postMessageToRN({ type: "interactionStart" });
10:   }, [postMessageToRN]);
11:   const notifyInteractionEnd = useCallback(() => {
12:     postMessageToRN({ type: "interactionEnd" });
13:   }, [postMessageToRN]);
14:   useEffect(() => {
15:     window.updateItems = ({
16:       selectedItems: selected,
17:       occupiedItems: occupied,
18:     }) => {
19:       if (Array.isArray(selected)) {
20:         setSelectedItems(selected);
21:       }
22:       if (Array.isArray(occupied)) {
23:         setOccupiedItems(occupied);
24:       }
25:     };
26:     return () => {
27:       delete window.updateItems;
28:     };
29:   }, [setSelectedItems, setOccupiedItems]);
30:   return {
31:     postMessageToRN,
32:     notifyInteractionStart,
33:     notifyInteractionEnd,
34:   };
35: };

================
File: src/App.js
================
 1: import React, { useEffect } from "react";
 2: import { Scene } from "./components/Scene";
 3: import { useReactNativeMessaging } from "./hooks/useReactNativeMessaging";
 4: import { useContentHeight } from "./hooks/useContentHeight";
 5: import { ModelProvider, useModel } from "./context/ModelProvider";
 6: function App() {
 7:   return (
 8:     <ModelProvider initialModelKey="kitchen">
 9:       <RestaurantApp />
10:     </ModelProvider>
11:   );
12: }
13: function RestaurantApp() {
14:   const {
15:     modelConfig,
16:     selectedItems,
17:     occupiedItems,
18:     setSelectedItems,
19:     setOccupiedItems,
20:     toggleItemSelection,
21:     changeModel,
22:   } = useModel();
23:   const { notifyInteractionStart, notifyInteractionEnd, postMessageToRN } =
24:     useReactNativeMessaging(setSelectedItems, setOccupiedItems);
25:   useContentHeight();
26:   const handleItemClicked = (itemId) => {
27:     toggleItemSelection(itemId);
28:   };
29:   useEffect(() => {
30:     window.changeRestaurantModel = (modelKey) => {
31:       changeModel(modelKey);
32:       postMessageToRN({
33:         type: "modelChanged",
34:         modelKey,
35:         availableItems: modelConfig.selectableItems.map((item) => item.id),
36:       });
37:     };
38:     return () => {
39:       delete window.changeRestaurantModel;
40:     };
41:   }, [changeModel, modelConfig, postMessageToRN]);
42:   return (
43:     <div
44:       style={{ width: "100%" }}
45:       onTouchStart={notifyInteractionStart}
46:       onTouchEnd={notifyInteractionEnd}
47:       onMouseDown={notifyInteractionStart}
48:       onMouseUp={notifyInteractionEnd}
49:     >
50:       <Scene
51:         modelConfig={modelConfig}
52:         selectedItems={selectedItems}
53:         occupiedItems={occupiedItems}
54:         onItemClicked={handleItemClicked}
55:       />
56:     </div>
57:   );
58: }
59: export default App;

================
File: src/index.css
================
 1: body {
 2:   margin: 0;
 3:   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
 4:     'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
 5:     sans-serif;
 6:   -webkit-font-smoothing: antialiased;
 7:   -moz-osx-font-smoothing: grayscale;
 8: }
 9: code {
10:   font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
11:     monospace;
12: }

================
File: src/index.js
================
 1: import React from "react";
 2: import ReactDOM from "react-dom/client";
 3: import "./index.css";
 4: import App from "./App";
 5: import reportWebVitals from "./reportWebVitals";
 6: const root = ReactDOM.createRoot(document.getElementById("root"));
 7: root.render(
 8:   <React.StrictMode>
 9:     <App />
10:   </React.StrictMode>
11: );
12: reportWebVitals();

================
File: src/reportWebVitals.js
================
 1: const reportWebVitals = onPerfEntry => {
 2:   if (onPerfEntry && onPerfEntry instanceof Function) {
 3:     import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
 4:       getCLS(onPerfEntry);
 5:       getFID(onPerfEntry);
 6:       getFCP(onPerfEntry);
 7:       getLCP(onPerfEntry);
 8:       getTTFB(onPerfEntry);
 9:     });
10:   }
11: };
12: export default reportWebVitals;

================
File: .gitignore
================
 1: # See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
 2: 
 3: # dependencies
 4: /node_modules
 5: /.pnp
 6: .pnp.js
 7: 
 8: # testing
 9: /coverage
10: 
11: # production
12: /build
13: 
14: # misc
15: .DS_Store
16: .env.local
17: .env.development.local
18: .env.test.local
19: .env.production.local
20: 
21: npm-debug.log*
22: yarn-debug.log*
23: yarn-error.log*

================
File: package.json
================
 1: {
 2:   "name": "restaurant-3d",
 3:   "version": "0.1.0",
 4:   "private": true,
 5:   "dependencies": {
 6:     "@react-three/drei": "^9.109.2",
 7:     "@react-three/fiber": "^8.16.8",
 8:     "@react-three/postprocessing": "^2.16.2",
 9:     "@testing-library/jest-dom": "^5.17.0",
10:     "@testing-library/react": "^13.4.0",
11:     "@testing-library/user-event": "^13.5.0",
12:     "lodash": "^4.17.21",
13:     "react": "^18.3.1",
14:     "react-dom": "^18.3.1",
15:     "react-scripts": "5.0.1",
16:     "three": "^0.167.1",
17:     "web-vitals": "^2.1.4"
18:   },
19:   "scripts": {
20:     "start": "react-scripts start",
21:     "build": "react-scripts build",
22:     "test": "react-scripts test",
23:     "eject": "react-scripts eject"
24:   },
25:   "eslintConfig": {
26:     "extends": [
27:       "react-app",
28:       "react-app/jest"
29:     ]
30:   },
31:   "browserslist": {
32:     "production": [
33:       ">0.2%",
34:       "not dead",
35:       "not op_mini all"
36:     ],
37:     "development": [
38:       "last 1 chrome version",
39:       "last 1 firefox version",
40:       "last 1 safari version"
41:     ]
42:   },
43:   "devDependencies": {
44:     "@babel/plugin-proposal-private-property-in-object": "^7.21.11"
45:   }
46: }

================
File: repomix.config.json
================
 1: {
 2:   "include": ["src/**/*", "*.*"],
 3:   "ignore": {
 4:     "useGitignore": true,
 5:     "useDefaultPatterns": true,
 6:     "customPatterns": ["**/*.log", "node_modules/**/*"]
 7:   },
 8:   "output": {
 9:     "style": "plain",
10:     "filePath": "repomix-output.txt",
11:     "removeComments": true,
12:     "showLineNumbers": true,
13:     "topFilesLength": 10,
14:     "removeEmptyLines": true,
15:     "copyToClipboard": true
16:   }
17: }

================
File: webpack.config.js
================
 1: module.exports = {
 2:     module: {
 3:       rules: [
 4:         {
 5:           test: /\.m?js$/,
 6:           enforce: 'pre',
 7:           use: ['source-map-loader'],
 8:           exclude: /node_modules\/@mediapipe\/tasks-vision/
 9:         },
10:       ],
11:     },
12:     ignoreWarnings: [/Failed to parse source map/],
13:   };



================================================================
End of Codebase
================================================================
